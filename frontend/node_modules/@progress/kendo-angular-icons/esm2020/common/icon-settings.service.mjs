/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * A service that returns the current icon settings to be used in subscribers.
 * Use the public `notify` method to change the icon settings dynamically.
 */
export class IconSettingsService {
    constructor() {
        /**
         * @hidden
         */
        this.changes = new Subject();
    }
    /**
     * Notifies subscribers that the icon settings were changed.
     *
     * @param iconSettings - (Optional) A new value for the [icon settings token]({% slug api_icons_icon_settings %}).
     */
    notify(iconSettings) {
        this.changes.next(iconSettings);
    }
    /**
     * Returns the [`SVGIcon`](slug:api_icons_svgicon) object for the provided key.
     * Override in a custom service to provide custom SVG icons.
     *
     * @hidden
     */
    getSvgIcon(_name) {
        return null;
    }
    /**
     * Returns the list of classes to be rendered on the host `SPAN` element of custom font icons.
     * Override in a custom service to provide classes for custom font icons.
     *
     * @hidden
     */
    getCustomFontIconClass(_key) {
        return null;
    }
}
IconSettingsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: IconSettingsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
IconSettingsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: IconSettingsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: IconSettingsService, decorators: [{
            type: Injectable
        }] });
