/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, Renderer2, AfterViewChecked } from '@angular/core';
import { Orientation } from '../common/orientation';
import * as i0 from "@angular/core";
/**
 * Represents the pane component of the Splitter.
 */
export declare class SplitterPaneComponent implements AfterViewChecked {
    element: ElementRef<HTMLElement>;
    private renderer;
    private cdr;
    /**
     * @hidden
     */
    set order(paneOrder: number);
    get order(): number;
    /**
     * Sets the initial size of the pane.
     * Has to be between the `min` and `max` properties.
     */
    set size(newSize: string);
    get size(): string;
    /**
     * The value of the aria-label attribute of the auxiliary separator.
     */
    separatorLabel: string;
    /**
     * Sets the minimum possible size of the pane.
     */
    min: string;
    /**
     * Sets the maximum possible size of the pane.
     */
    max: string;
    /**
     * Specifies if the user is allowed to resize the pane and provide space for other panes.
     */
    resizable: boolean;
    /**
     * Specifies if the user is allowed to hide the pane and provide space for other panes.
     */
    collapsible: boolean;
    /**
     * Specifies if overflowing content is scrollable or hidden.
     */
    scrollable: boolean;
    /**
     * Specifies if the pane is initially collapsed.
     */
    collapsed: boolean;
    /**
     * @hidden
     */
    orientation: Orientation;
    /**
     * @hidden
     */
    set containsSplitter(value: boolean);
    /**
     * @hidden
     */
    overlayContent: boolean;
    /**
     * Fires each time the user resizes the Splitter pane.
     * The event data contains the new pane size.
     * Allows a two-way binding of the pane `size` property.
     */
    sizeChange: EventEmitter<string>;
    /**
     * Fires each time the `collapsed` property changes.
     * The event data contains the new property state.
     * Allows a two-way binding of the `collapsed` pane property.
     */
    collapsedChange: EventEmitter<boolean>;
    get isHidden(): boolean;
    ariaRole: string;
    hostClass: boolean;
    get staticPaneClass(): boolean;
    get scrollablePaneClass(): boolean;
    get fixedSize(): boolean;
    /**
     * @hidden
     */
    forceExpand: boolean;
    /**
     * @hidden
     */
    isResized: boolean;
    private _size;
    private _order;
    constructor(element: ElementRef<HTMLElement>, renderer: Renderer2, cdr: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    /**
     * @hidden
     */
    get computedSize(): number;
    /**
     * @hidden
     */
    toggleOverlay(show: boolean): void;
    /**
     * @hidden
     */
    detectChanges(): void;
    private setOrderStyles;
    static ɵfac: i0.ɵɵFactoryDeclaration<SplitterPaneComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SplitterPaneComponent, "kendo-splitter-pane", ["kendoSplitterPane"], { "order": "order"; "size": "size"; "separatorLabel": "separatorLabel"; "min": "min"; "max": "max"; "resizable": "resizable"; "collapsible": "collapsible"; "scrollable": "scrollable"; "collapsed": "collapsed"; "orientation": "orientation"; "containsSplitter": "containsSplitter"; "overlayContent": "overlayContent"; }, { "sizeChange": "sizeChange"; "collapsedChange": "collapsedChange"; }, never, ["*"]>;
}
