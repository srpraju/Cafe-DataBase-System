/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, Renderer2, ElementRef, AfterViewInit } from '@angular/core';
import { SVGIcon } from '@progress/kendo-svg-icons';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { AvatarFillMode, AvatarShape, AvatarSize, AvatarThemeColor, AvatarRounded } from './models/models';
import * as i0 from "@angular/core";
/**
 * Displays images, icons or initials representing people or other entities.
 */
export declare class AvatarComponent implements OnInit, AfterViewInit {
    private localization;
    private renderer;
    private element;
    hostClass: boolean;
    /**
     * @hidden
     */
    get borderClass(): boolean;
    /**
     * @hidden
     */
    get flexBasis(): string;
    /**
     * Sets the shape for the avatar.
     * @hidden
     */
    set shape(shape: AvatarShape);
    /**
     * Specifies the size of the avatar
     * ([see example]({% slug appearance_avatar %}#toc-size)).
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     * * `none`
     */
    set size(size: AvatarSize);
    get size(): AvatarSize;
    /**
     * Specifies the rounded styling of the avatar
     * ([see example]({% slug appearance_avatar %}#toc-rounded-corners)).
     *
     * The possible values are:
     * * `small`
     * * `medium`
     * * `large`
     * * `full` (Default)
     * * `none`
     */
    set rounded(rounded: AvatarRounded);
    get rounded(): AvatarRounded;
    /**
     * Specifies the theme color of the avatar.
     * The theme color will be applied as background and border color, while also amending the text color accordingly.
     *
     * The possible values are:
     * * `base`&mdash; Applies the base coloring value.
     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverted theme color.
     * * `none`&mdash; Removes the styling associated with the theme color.
     */
    set themeColor(themeColor: AvatarThemeColor);
    get themeColor(): AvatarThemeColor;
    /**
     * Specifies the appearance fill style of the avatar.
     *
     * The possible values are:
     * * `solid` (Default)
     * * `outline`
     * * `none`
     */
    set fillMode(fillMode: AvatarFillMode);
    get fillMode(): AvatarFillMode;
    /**
     * Specifies the appearance fill style of the avatar.
     * Deprecated, left for backward compatibility.
     *
     * @hidden
     */
    set fill(fillMode: AvatarFillMode);
    /**
     * Sets a border to the avatar.
     */
    border: boolean;
    /**
     * Defines a CSS class — or multiple classes separated by spaces —
     * which are applied to a span element inside the avatar.
     * Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Sets the width of the avatar.
     */
    width: string;
    /**
     * @hidden
     */
    get avatarWidth(): string;
    /**
     * Sets the height of the avatar.
     */
    height: string;
    /**
     * @hidden
     */
    get avatarHeight(): string;
    /**
     * The CSS styles that will be rendered on the content element of the avatar.
     * Supports the type of values that are supported by [ngStyle](link:site.data.urls.angular['ngstyleapi']).
     */
    cssStyle?: any;
    /**
     * Sets `initials` to the avatar.
     */
    initials: string;
    /**
     * Sets the `icon` for the avatar.
     * All [Kendo UI Icons]({% slug icons %}#toc-list-of-font-icons) are supported.
     */
    icon: string;
    /**
     * Sets the `image` source of the avatar.
     */
    imageSrc: string;
    /**
     * Defines an SVGIcon to be rendered.
     * The input can take either an [existing Kendo SVG icon](slug:svgicon_list) or a custom one.
     */
    set svgIcon(icon: SVGIcon);
    get svgIcon(): SVGIcon;
    private _themeColor;
    private _size;
    private _fillMode;
    private _rounded;
    private _svgIcon;
    constructor(localization: LocalizationService, renderer: Renderer2, element: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    get customAvatar(): boolean;
    private verifyProperties;
    private handleClasses;
    private handleFillModeAndThemeColorClasses;
    /**
     * @hidden
     */
    textFor(key: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AvatarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AvatarComponent, "kendo-avatar", never, { "shape": "shape"; "size": "size"; "rounded": "rounded"; "themeColor": "themeColor"; "fillMode": "fillMode"; "fill": "fill"; "border": "border"; "iconClass": "iconClass"; "width": "width"; "height": "height"; "cssStyle": "cssStyle"; "initials": "initials"; "icon": "icon"; "imageSrc": "imageSrc"; "svgIcon": "svgIcon"; }, {}, never, ["*"]>;
}
