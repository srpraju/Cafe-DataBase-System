/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ElementRef, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { TileLayoutDraggingService } from './dragging-service';
import { TileLayoutKeyboardNavigationService } from './keyboard-navigation.service';
import * as i0 from "@angular/core";
/**
 * Represents a tile item within the TileLayoutComponent.
 */
export declare class TileLayoutItemComponent implements AfterViewInit, OnDestroy, OnChanges {
    elem: ElementRef;
    private zone;
    private renderer;
    private localization;
    private draggingService;
    private keyboardNavigationService;
    /**
     * The title that will be rendered in the item header ([see example]({% slug tiles_tilelayout %}#toc-tiles-configuration)).
     */
    title: string;
    /**
     * Determines how many rows will the tile item span ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     * @default 1
     */
    rowSpan: number;
    /**
     * Determines how many columns will the tile item span ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     * @default 1
     */
    colSpan: number;
    /**
     * Determines the order of the tile items within the TileLayout.
     * If not set, the items will receive increasing sequential order in accordance with
     * their position in the DOM when initially rendered.
     */
    set order(value: number);
    get order(): number;
    /**
     * Sets the starting column of the item ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     */
    col: number;
    /**
     * Sets the starting row of the item ([see example]({% slug tiles_tilelayout %}#toc-tile-size-and-position)).
     */
    row: number;
    /**
     * Determines whether the item can be reordered. By default all items are reorderable when the [reorderable]({% slug api_layout_tilelayoutcomponent %}#toc-reorderable) property of the TileLayoutComponent is set to `true` ([see example]({% slug reordering_tilelayout %}#toc-disable-reordering)).
     *
     * @default true
     */
    reorderable: boolean;
    /**
     * Determines whether the item can be resized. By default all items are resizable when the [resizable]({% slug api_layout_tilelayoutcomponent %}#resizable) property of the TileLayoutComponent is set to `true` ([see example]({% slug resizing_tilelayout %}#toc-disable-resizing)).
     * @default true
     */
    resizable: boolean;
    itemClass: boolean;
    hostRole: string;
    get hostDropEffect(): string;
    get hostTabindex(): string;
    get ariaKeyShortcuts(): string;
    get hostGrabbed(): boolean;
    get hostLabelledBy(): string;
    get colEnd(): string;
    get rowEnd(): string;
    get colStart(): string;
    get rowStart(): string;
    /**
     * @hidden
     */
    get isReorderable(): boolean;
    /**
     * @hidden
     */
    get isNavigable(): boolean;
    /**
     * @hidden
     */
    get isResizable(): boolean;
    /**
     * @hidden
     */
    resizeDirections: Array<string>;
    /**
     * @hidden
     */
    rtl: boolean;
    private headers;
    /**
     * @hidden
     */
    titleId: string;
    private subs;
    private keyboardNavigationSubs;
    private focusableItems;
    private _order;
    constructor(elem: ElementRef, zone: NgZone, renderer: Renderer2, localization: LocalizationService, draggingService: TileLayoutDraggingService, keyboardNavigationService: TileLayoutKeyboardNavigationService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private toggleCursorClass;
    static ɵfac: i0.ɵɵFactoryDeclaration<TileLayoutItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TileLayoutItemComponent, "kendo-tilelayout-item", never, { "title": "title"; "rowSpan": "rowSpan"; "colSpan": "colSpan"; "order": "order"; "col": "col"; "row": "row"; "reorderable": "reorderable"; "resizable": "resizable"; }, {}, ["headers"], ["*"]>;
}
