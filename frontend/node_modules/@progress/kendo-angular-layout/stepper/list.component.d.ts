/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2, TemplateRef } from "@angular/core";
import { StepperOrientation } from './models/orientation';
import { StepType } from './models/step-type';
import { StepperService } from "./stepper.service";
import { SVGIcon } from "@progress/kendo-svg-icons";
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class StepperListComponent implements OnInit, OnDestroy {
    private renderer;
    private ngZone;
    private service;
    element: ElementRef;
    linear: boolean;
    stepType: StepType;
    orientation: StepperOrientation;
    currentStep: number;
    steps: any[];
    successIcon: string;
    successSVGIcon: SVGIcon;
    errorIcon: string;
    errorSVGIcon: SVGIcon;
    svgIcon: SVGIcon;
    indicatorTemplate: TemplateRef<any>;
    labelTemplate: TemplateRef<any>;
    stepTemplate: TemplateRef<any>;
    listKeydown: EventEmitter<any>;
    listClick: EventEmitter<any>;
    private domSubs;
    constructor(renderer: Renderer2, ngZone: NgZone, service: StepperService, element: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    get maxStepWidth(): number;
    get maxStepHeight(): number;
    get focusedStep(): number;
    private maxStepDimension;
    private initDomEvents;
    private clickHandler;
    private getStepIndex;
    static ɵfac: i0.ɵɵFactoryDeclaration<StepperListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StepperListComponent, "[kendoStepperList]", never, { "linear": "linear"; "stepType": "stepType"; "orientation": "orientation"; "currentStep": "currentStep"; "steps": "steps"; "successIcon": "successIcon"; "successSVGIcon": "successSVGIcon"; "errorIcon": "errorIcon"; "errorSVGIcon": "errorSVGIcon"; "svgIcon": "svgIcon"; "indicatorTemplate": "indicatorTemplate"; "labelTemplate": "labelTemplate"; "stepTemplate": "stepTemplate"; }, { "listKeydown": "listKeydown"; "listClick": "listClick"; }, never, never>;
}
