import { <% if(changeDetection !== 'Default') { %>ChangeDetectionStrategy, <% }%>Component<% if(!!viewEncapsulation) { %>, ViewEncapsulation<% }%> } from '@angular/core';<% if(standalone) {%>
import { CommonModule } from '@angular/common';<% } %><% if (dataSource === "Example") {%>
import { products } from './<%= dasherize(name) %>.sample-data'; <% } %><% if (dataSource === "Mock Data") {%>
import data from './<%= dasherize(name) %>.sample-data';<% } %><% if (editing) {%>
import { FormBuilder, FormGroup } from '@angular/forms';
import { CreateFormGroupArgs<% if(standalone) {%>, GridModule<%}%> } from '@progress/kendo-angular-grid';<% } %>

@Component({<% if(!skipSelector) {%>
  selector: '<%= selector %>',<%}%><% if(standalone) {%>
  standalone: true,
  imports: [CommonModule<% if(standalone) {%>, GridModule<%}%> ],<%}%><% if(inlineTemplate) { %>
  template: `<%= include("grid.html.include") %>`<% } else { %>
  templateUrl: './<%= dasherize(name) %><%= type ? '.' + dasherize(type): '' %>.html'<% } if(inlineStyle) { %>,
  styles: [<% if(displayBlock){ %>
    `
      :host {
        display: block;
      }
    `<% } %>
  ]<% } else if (style !== 'none') { %>,
  styleUrls: ['./<%= dasherize(name) %><%= type ? '.' + dasherize(type): '' %>.<%= style %>']<% } %><% if(!!viewEncapsulation) { %>,
  encapsulation: ViewEncapsulation.<%= viewEncapsulation %><% } if (changeDetection !== 'Default') { %>,
  changeDetection: ChangeDetectionStrategy.<%= changeDetection %><% } %>
})
export class <%= classify(name) %><%= classify(type) %> {
  public gridData: any[] = <% if (dataSource === "Example") { %>products<% } else if (dataSource === "Mock Data") { %>data<% } else if (dataName) { %><%=dataName%><% } else { %>products<%} %>;<% if (paging) { %>
  public pageSize: number = <%=pageSize%>;<% } %><% if (editing) {%>

  constructor(private formBuilder: FormBuilder) { }

  public createFormGroup = (args: CreateFormGroupArgs): FormGroup => {
    // TODO: Implement default item factory.
    const item = args.isNew ? Object.keys(this.gridData[0]).reduce((acc, curr) => (acc as any)[curr] = null || acc, {}) : args.dataItem;

    return this.formBuilder.group(item);
  };<% } %>
}
