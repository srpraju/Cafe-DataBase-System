{
	"progress:name": "Grid",
	"progress:description": "Generate new Kendo UI for Angular Grid page",
	"$schema": "http://json-schema.org/schema",
	"$id": "KendoAngularGrid",
	"type": "object",
	"properties": {
		"path": {
			"type": "string",
			"format": "path",
			"$default": {
				"$source": "workingDirectory"
			},
			"description": "The path at which to create the component file, relative to the current workspace. Default is a folder with the same name as the component in the project root.",
			"visible": false,
			"progress:editorVisible": false
		},
		"project": {
			"type": "string",
			"description": "The name of the project.",
			"$default": {
				"$source": "projectName"
			},
			"progress:editorVisible": false
		},
		"name": {
			"type": "string",
			"description": "The name of the component.",
			"$default": {
				"$source": "argv",
				"index": 0
			},
			"default": "GridPage",
			"x-prompt": "What name would you like to use for the component?"
		},
		"module": {
			"type": "string",
			"description": "The declaring NgModule.",
			"alias": "m",
			"progress:editorVisible": false
		},
		"selector": {
			"type": "string",
			"format": "html-selector",
			"description": "The HTML selector to use for this component.",
			"progress:editorVisible": false
		},
		"type": {
			"type": "string",
			"description": "Adds a developer-defined type to the filename, in the format \"name.type.ts\".",
			"default": "Component",
			"progress:editorVisible": false
		},
		"displayBlock": {
			"description": "Specifies if the style will contain `:host { display: block; }`.",
			"type": "boolean",
			"default": false,
			"alias": "b",
			"progress:editorVisible": false
		},
		"standalone": {
			"description": "Whether the generated component is standalone.",
			"type": "boolean",
			"x-user-analytics": 15,
			"progress:editorVisible": false,
			"progress:angular-default": {
				"<17": false,
				">=17": true
			}
		},
		"changeDetection": {
			"description": "The change detection strategy to use in the new component.",
			"enum": ["Default", "OnPush"],
			"type": "string",
			"default": "Default",
			"alias": "c",
			"progress:editorVisible": false
		},
		"viewEncapsulation": {
			"description": "The view encapsulation strategy to use in the new component.",
			"enum": ["Emulated", "None", "ShadowDom"],
			"type": "string",
			"alias": "v",
			"x-user-analytics": 11,
			"progress:editorVisible": false
		},
		"skipSelector": {
			"type": "boolean",
			"default": false,
			"description": "Specifies if the component should have a selector or not.",
			"progress:editorVisible": false
		},

		"inlineTemplate": {
			"progress:category": "Code Generation",
			"progress:display-name": "Inline template",
			"description": "Include template inline in the component.ts file. By default, an external template file is created and referenced in the component.ts file.",
			"type": "boolean",
			"default": false,
			"alias": "t"
		},
		"style": {
			"description": "The file extension or preprocessor to use for style files, or 'none' to skip generating the style file.",
			"type": "string",
			"default": "css",
			"enum": ["css", "scss", "sass", "less", "none"],
			"x-user-analytics": "ep.ng_style"
		},
		"inlineStyle": {
			"progress:category": "Code Generation",
			"description": "Include styles inline in the component.ts file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the component.ts file.",
			"type": "boolean",
			"default": false,
			"alias": "s"
		},
		"skipTests": {
			"progress:category": "Code Generation",
			"type": "boolean",
			"description": "Do not create \"spec.ts\" test files for the new component.",
			"default": false
		},
		
		"editing": {
			"progress:category": "Grid Features",
			"description": "Configures the Grid for inline or incell editing.",
			"type": "string",
			"enum": ["none", "inline", "incell"],
			"default": "none"
		},
		"filtering": {
			"progress:category": "Grid Features",
			"description": "Enables Grid filtering",
			"type": "boolean",
			"default": false
		},
		"grouping": {
			"progress:category": "Grid Features",
			"description": "Enables Grid grouping",
			"type": "boolean",
			"default": false
		},
		"paging": {
			"progress:category": "Grid Features",
			"description": "Enables Grid paging",
			"type": "boolean",
			"default": false
		},
		"sorting": {
			"progress:category": "Grid Features",
			"description": "Enables Grid sorting",
			"type": "boolean",
			"default": false
		},
		"resizing": {
			"progress:category": "Grid Features",
			"description": "Enables Grid resizing",
			"type": "boolean",
			"default": false
		},
		"reordering": {
			"progress:category": "Grid Features",
			"description": "Enables Grid reordering",
			"type": "boolean",
			"default": false
		},
		"columnMenu": {
			"progress:category": "Grid Features",
			"description": "Enables Grid column menu",
			"type": "boolean",
			"default": false
		},
		"navigable": {
			"progress:category": "Grid Features",
			"description": "Makes the Grid navigable",
			"type": "boolean",
			"default": false
		},
		"pageSize": {
			"progress:category": "Grid Features",
			"description": "Sets the pageSize of a pageable Grid",
			"type": "number",
			"default": 3
		},
		"height": {
			"progress:category": "Grid Features",
			"description": "Sets the height of the Grid",
			"type": "number",
			"default": 300
		},
		"dataSource": {
			"progress:category": "Data Source",
			"description": "Select grid data source generation strategy",
			"type": "string",
			"default": "Example",
			"enum": [ "Example", "Mock Data", "Existing App Data" ],
			"progress:enum": [{
				"name": "Example", "description": "An example data source will be added to the project, with predefined column definitions."
			}, {
				"name": "Mock Data", "description": "Specify column definitions, from which mock data will be generated and added to the project."
			}]
		},
		"columns": {
			"progress:category": "Data Source",
			"hidden": true,
			"description": "Specifies the columns in the Grid",
			"type": "array",
			"progress:attributes": [
				{ "type": "hideOnPropertyValue", "property": "dataSource", "values": [ "Example" ] }
			],
			"items": { "type": "string" }
		}
	},
	"required": [
		"name"
	]
}
