/**-----------------------------------------------------------------------------------------
* Copyright Â© 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchModules = exports.getNGVersion = exports.waitToLoadApp = exports.loadUrl = exports.kill = exports.execAsync = exports.exec = exports.replaceAllStringInFile = exports.replaceStringInFile = exports.deleteFileIfExists = exports.copyFile = exports.copyFolder = exports.cleanFolder = exports.packSchematics = exports.schematicsPackagePath = exports.schematicsPackageName = exports.schematicsPath = exports.tempDir = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const path_1 = require("path");
const child_process_1 = require("child_process");
const util_1 = require("util");
const kendo_e2e_1 = require("@progress/kendo-e2e");
const execSync = (0, util_1.promisify)(child_process_1.exec);
exports.tempDir = (0, path_1.resolve)('../tmp');
exports.schematicsPath = (0, path_1.resolve)("./dist/libs/schematics/");
exports.schematicsPackageName = 'progress-kendo-angular-schematics-0.0.0-PLACEHOLDER.tgz';
exports.schematicsPackagePath = (0, path_1.resolve)(`${exports.tempDir}/${exports.schematicsPackageName}`);
async function packSchematics() {
    await deleteFileIfExists(exports.schematicsPackageName, exports.schematicsPath);
    await deleteFileIfExists(exports.schematicsPackageName, exports.tempDir);
    const output = await exec('npm pack', exports.schematicsPath);
    if (!output.stdout.includes(exports.schematicsPackageName)) {
        throw new Error('Failed to pack schematics.');
    }
    copyFile((0, path_1.resolve)(`${exports.schematicsPath}/${exports.schematicsPackageName}`), exports.schematicsPackagePath);
}
exports.packSchematics = packSchematics;
function cleanFolder(dir) {
    const resolvedDir = (0, path_1.resolve)(dir);
    if (fs.existsSync(resolvedDir)) {
        console.log(`Cleanup: ${resolvedDir}`);
        fs.rmSync(resolvedDir, { recursive: true, force: true });
    }
    console.log(`Create: ${resolvedDir}`);
    fs.mkdirSync(resolvedDir, { recursive: true });
}
exports.cleanFolder = cleanFolder;
function copyFolder(sourceFolder, targetFolder) {
    const src = (0, path_1.resolve)(sourceFolder);
    const target = (0, path_1.resolve)(targetFolder);
    fs.cpSync(src, target, { recursive: true, dereference: true });
    console.log(`Copy ${src} to ${target}`);
}
exports.copyFolder = copyFolder;
function copyFile(sourceFilePath, targetFilePath) {
    fs.cpSync(sourceFilePath, targetFilePath, { force: true });
    console.log(`File '${sourceFilePath}' copied to '${targetFilePath}' successfully.`);
}
exports.copyFile = copyFile;
async function deleteFileIfExists(fileName, filePath) {
    try {
        const fullPathToFile = (0, path_1.resolve)(filePath + '/' + fileName);
        await fs.promises.unlink(fullPathToFile);
        console.log(`File: '${fullPathToFile}' has been deleted.`);
    }
    catch (error) {
        console.warn(`Error deleting file: ${error.message}`);
    }
}
exports.deleteFileIfExists = deleteFileIfExists;
function replaceStringInFile(filePath, oldString, newString) {
    const absolutePath = (0, path_1.resolve)(filePath);
    const content = fs.readFileSync(absolutePath, 'utf8');
    fs.writeFileSync(absolutePath, content.replace(oldString, newString), 'utf8');
    console.log(`Replace: ${oldString}\nWith: ${newString}\nIn: ${absolutePath}`);
}
exports.replaceStringInFile = replaceStringInFile;
function replaceAllStringInFile(filePath, oldString, newString) {
    const absolutePath = (0, path_1.resolve)(filePath);
    const content = fs.readFileSync(absolutePath, 'utf8');
    const regex = new RegExp(oldString, 'g');
    fs.writeFileSync(absolutePath, content.replace(regex, newString), 'utf8');
    console.log(`Replace: ${oldString}\nWith: ${newString}\nIn: ${filePath}`);
}
exports.replaceAllStringInFile = replaceAllStringInFile;
async function exec(cmd, wd) {
    const cwd = (0, path_1.resolve)(wd);
    console.log(`Execute: ${cmd}\nCwd: ${cwd}`);
    return await execSync(cmd, { cwd: cwd });
}
exports.exec = exec;
function execAsync(cmd, wd) {
    const cwd = (0, path_1.resolve)(wd);
    console.log(`Execute: ${cmd}\nCwd: ${cwd}`);
    return (0, child_process_1.exec)(cmd, { cwd: cwd });
}
exports.execAsync = execAsync;
function kill(process) {
    // FIXES PIPEWRAP open handle
    process.stdout.destroy();
    process.stderr.destroy();
    process.stdin.destroy();
    // FIXES PROCESSWRAP open handle
    process.kill(); // (Optional: Just if you want to kill the process)
    process.unref(); // Necessary: fixes PROCESSWRAP
}
exports.kill = kill;
async function loadUrl(browser, url) {
    await browser.wait(async () => {
        try {
            await browser.navigateTo(url);
            return true;
        }
        catch {
            return false;
        }
    }, 90000, `Failed to load ${url}`, 1000);
}
exports.loadUrl = loadUrl;
async function waitToLoadApp(browser, appName) {
    const preNG17 = `//*[text()='${appName} app is running!']`;
    const postNG17 = `//*[text()='Hello, ${appName}']`;
    const label = kendo_e2e_1.By.xpath(`${preNG17} | ${postNG17}`);
    return await browser.isVisible(label, 60000);
}
exports.waitToLoadApp = waitToLoadApp;
function getNGVersion(appPath) {
    const content = fs.readFileSync((0, path_1.resolve)(`${appPath}/package.json`), 'utf-8');
    const json = JSON.parse(content);
    const coreVersion = json.dependencies['@angular/core'];
    return parseInt(coreVersion.split('.')[0].substring(1));
}
exports.getNGVersion = getNGVersion;
function patchModules(appPath, kendoPackage) {
    const absoluteAppPath = (0, path_1.resolve)(appPath);
    const rootModules = (0, path_1.resolve)(`${absoluteAppPath}/node_modules/@progress/kendo-angular-schematics`);
    const packageModules = (0, path_1.resolve)(`${absoluteAppPath}/node_modules/@progress/${kendoPackage}/node_modules/@progress/kendo-angular-schematics`);
    if (fs.existsSync((0, path_1.resolve)(packageModules))) {
        console.log(`Replace schematics at ${packageModules} node_modules.`);
        cleanFolder(packageModules);
        copyFolder(rootModules, packageModules);
    }
}
exports.patchModules = patchModules;
//# sourceMappingURL=utils.js.map